{
	"info": {
		"_postman_id": "81b6ee1f-8a5e-4604-b08e-161dd6384ac8",
		"name": "Analytics",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46308101",
		"_collection_link": "https://michellewong-8956492.postman.co/workspace/Michelle-Wong's-Workspace~eb3df9cc-fb49-40c3-8181-9b5c55b64548/collection/46308101-81b6ee1f-8a5e-4604-b08e-161dd6384ac8?action=share&source=collection_link&creator=46308101"
	},
	"item": [
		{
			"name": "Analytics - Attendance Per Month",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// ==========================================",
							"// CONFIGURATION",
							"// ==========================================",
							"const baseUrl = \"http://localhost:8080\";",
							"console.log(\"üöÄ Starting flow: create user ‚Üí club ‚Üí add user ‚Üí 12 monthly events ‚Üí random attendances\");",
							"",
							"// --- Utility functions ---",
							"function randomInt(min, max) {",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;",
							"}",
							"",
							"function randomDateInMonth(year, month) {",
							"  const day = randomInt(1, 28); // safe for all months",
							"  const hour = randomInt(8, 20);",
							"  const minute = randomInt(0, 59);",
							"  const start = new Date(year, month, day, hour, minute);",
							"  const end = new Date(start.getTime() + randomInt(60, 180) * 60000); // +1‚Äì3 hours",
							"  const pad = (n) => String(n).padStart(2, \"0\");",
							"",
							"  return {",
							"    start: `${start.getFullYear()}-${pad(start.getMonth() + 1)}-${pad(start.getDate())}T${pad(start.getHours())}:${pad(start.getMinutes())}:00`,",
							"    end: `${end.getFullYear()}-${pad(end.getMonth() + 1)}-${pad(end.getDate())}T${pad(end.getHours())}:${pad(end.getMinutes())}:00`",
							"  };",
							"}",
							"",
							"// ==========================================",
							"// STEP 1: CREATE USER",
							"// ==========================================",
							"pm.sendRequest({",
							"  url: `${baseUrl}/api/auth`,",
							"  method: \"POST\",",
							"  header: [",
							"    { key: \"Content-Type\", value: \"application/json\" },",
							"    { key: \"Accept\", value: \"application/json\" }",
							"  ],",
							"  body: {",
							"    mode: \"raw\",",
							"    raw: JSON.stringify({",
							"      firstName: pm.variables.replaceIn(\"{{$randomFirstName}}\"),",
							"      lastName: pm.variables.replaceIn(\"{{$randomLastName}}\"),",
							"      email: pm.variables.replaceIn(\"{{$randomEmail}}\"),",
							"      password: pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\")",
							"    })",
							"  }",
							"}, function (err, res) {",
							"  if (err) return console.error(\"‚ùå Error creating user:\", err);",
							"",
							"  const user = res.json();",
							"  const userId = user.userId || user.id || user.username; // fallback if returned as username",
							"  pm.environment.set(\"userId\", userId);",
							"  console.log(\"‚úÖ User created:\", userId);",
							"",
							"  // ==========================================",
							"  // STEP 2: CREATE CLUB",
							"  // ==========================================",
							"  pm.sendRequest({",
							"    url: `${baseUrl}/api/clubs`,",
							"    method: \"POST\",",
							"    header: [",
							"      { key: \"Content-Type\", value: \"application/json\" },",
							"      { key: \"Accept\", value: \"application/json\" }",
							"    ],",
							"    body: {",
							"      mode: \"raw\",",
							"      raw: JSON.stringify({",
							"        name: \"Club \" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\"),",
							"        description: \"Auto-generated club for 12-month event dataset\"",
							"      })",
							"    }",
							"  }, function (err2, res2) {",
							"    if (err2) return console.error(\"‚ùå Error creating club:\", err2);",
							"",
							"    const club = res2.json();",
							"    const clubId = club.clubId || club.id;",
							"    pm.environment.set(\"clubId\", clubId);",
							"    console.log(\"‚úÖ Club created:\", clubId);",
							"",
							"    // ==========================================",
							"    // STEP 3: ADD USER TO CLUB (ADMIN)",
							"    // ==========================================",
							"    pm.sendRequest({",
							"      url: `${baseUrl}/api/clubs/user`,",
							"      method: \"POST\",",
							"      header: [",
							"        { key: \"Content-Type\", value: \"application/json\" },",
							"        { key: \"Accept\", value: \"application/json\" }",
							"      ],",
							"      body: {",
							"        mode: \"raw\",",
							"        raw: JSON.stringify({",
							"          clubId: clubId,",
							"          username: userId,",
							"          role: \"ADMIN\"",
							"        })",
							"      }",
							"    }, function (err3, res3) {",
							"      if (err3) return console.error(\"‚ùå Error adding user to club:\", err3);",
							"      console.log(\"‚úÖ User added to club as ADMIN\");",
							"",
							"      // ==========================================",
							"      // STEP 4: CREATE 12 EVENTS (1 PER MONTH)",
							"      // ==========================================",
							"      const now = new Date();",
							"      const firstMonth = new Date(now.getFullYear(), now.getMonth() - 11, 1);",
							"",
							"      let monthIndex = 0;",
							"      function createMonthlyEvent() {",
							"        if (monthIndex >= 12) {",
							"          console.log(\"üéØ All 12 events created successfully!\");",
							"          return;",
							"        }",
							"",
							"        const eventDate = new Date(firstMonth.getFullYear(), firstMonth.getMonth() + monthIndex, 1);",
							"        const { start, end } = randomDateInMonth(eventDate.getFullYear(), eventDate.getMonth());",
							"",
							"        const eventPayload = {",
							"          title: `Monthly Event ${monthIndex + 1}`,",
							"          startTime: start,",
							"          endTime: end,",
							"          location: \"Monash Campus\",",
							"          description: `Auto-generated event for ${eventDate.toLocaleString(\"default\", { month: \"long\", year: \"numeric\" })}`,",
							"          notification: { notifyBeforeMinutes: 30 },",
							"          clubs: [clubId],",
							"          userId: userId",
							"        };",
							"",
							"        pm.sendRequest({",
							"          url: `${baseUrl}/api/events`,",
							"          method: \"POST\",",
							"          header: [",
							"            { key: \"Content-Type\", value: \"application/json\" },",
							"            { key: \"Accept\", value: \"application/json\" }",
							"          ],",
							"          body: { mode: \"raw\", raw: JSON.stringify(eventPayload) }",
							"        }, function (errE, resE) {",
							"          if (errE) {",
							"            console.error(`‚ùå Error creating event for month ${monthIndex + 1}:`, errE);",
							"            monthIndex++;",
							"            createMonthlyEvent();",
							"            return;",
							"          }",
							"",
							"          const event = resE.json();",
							"          const eventId = event.eventId || event.id;",
							"          console.log(`üìÖ Event #${monthIndex + 1} created (${eventDate.toLocaleString(\"default\", { month: \"short\" })}): ${eventId}`);",
							"",
							"          // ==========================================",
							"          // STEP 5: CREATE RANDOM ATTENDANCES (5‚Äì20)",
							"          // ==========================================",
							"          const attendeesCount = randomInt(5, 20);",
							"          console.log(`üë• Creating ${attendeesCount} attendances for Event #${monthIndex + 1}`);",
							"",
							"          function createAttendance(i, callback) {",
							"            const firstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");",
							"            const lastName = pm.variables.replaceIn(\"{{$randomLastName}}\");",
							"            const email = `attendee${i + 1}.${monthIndex + 1}@monash.edu`;",
							"",
							"            const attendanceBody = {",
							"              firstName,",
							"              lastName,",
							"              memberType: \"MANAGER\",",
							"              email,",
							"              notes: `Auto-generated attendance for Event ${monthIndex + 1}`",
							"            };",
							"",
							"            pm.sendRequest({",
							"              url: `${baseUrl}/api/attendance/${eventId}`,",
							"              method: \"POST\",",
							"              header: [",
							"                { key: \"Content-Type\", value: \"application/json\" },",
							"                { key: \"Accept\", value: \"application/json\" }",
							"              ],",
							"              body: { mode: \"raw\", raw: JSON.stringify(attendanceBody) }",
							"            }, function (errA) {",
							"              if (errA) console.error(`‚ùå Error attendance ${i + 1} for Event ${monthIndex + 1}:`, errA);",
							"              else console.log(`‚úÖ Attendance ${i + 1}/${attendeesCount} created`);",
							"              if (callback) callback();",
							"            });",
							"          }",
							"",
							"          let i = 0;",
							"          function attendanceLoop() {",
							"            if (i < attendeesCount) {",
							"              createAttendance(i, function () {",
							"                i++;",
							"                setTimeout(attendanceLoop, 150);",
							"              });",
							"            } else {",
							"              console.log(`üéâ Finished Event #${monthIndex + 1} (${attendeesCount} attendees)`);",
							"              monthIndex++;",
							"              setTimeout(createMonthlyEvent, 400);",
							"            }",
							"          }",
							"          attendanceLoop();",
							"        });",
							"      }",
							"",
							"      createMonthlyEvent();",
							"    });",
							"  });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/clubs/analytic/{{userId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"clubs",
						"analytic",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Analytics - Tasks Completed",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// ==========================================",
							"// CONFIGURATION",
							"// ==========================================",
							"const baseUrl = \"http://localhost:8080\";",
							"console.log(\"üöÄ Starting flow: create user ‚Üí club ‚Üí add user ‚Üí 10 tasks with mixed statuses\");",
							"",
							"// --- Utility Functions ---",
							"function randomInt(min, max) {",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;",
							"}",
							"",
							"function randomPastDate(daysAgoMin, daysAgoMax) {",
							"  const daysAgo = randomInt(daysAgoMin, daysAgoMax);",
							"  const date = new Date();",
							"  date.setDate(date.getDate() - daysAgo);",
							"  const pad = (n) => String(n).padStart(2, \"0\");",
							"  return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}T${pad(date.getHours())}:${pad(date.getMinutes())}:${pad(date.getSeconds())}`;",
							"}",
							"",
							"function randomFutureDate(daysAheadMin, daysAheadMax) {",
							"  const daysAhead = randomInt(daysAheadMin, daysAheadMax);",
							"  const date = new Date();",
							"  date.setDate(date.getDate() + daysAhead);",
							"  const pad = (n) => String(n).padStart(2, \"0\");",
							"  return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}T${pad(date.getHours())}:${pad(date.getMinutes())}:${pad(date.getSeconds())}`;",
							"}",
							"",
							"// ==========================================",
							"// STEP 1: CREATE USER",
							"// ==========================================",
							"pm.sendRequest({",
							"  url: `${baseUrl}/api/auth`,",
							"  method: \"POST\",",
							"  header: [",
							"    { key: \"Content-Type\", value: \"application/json\" },",
							"    { key: \"Accept\", value: \"application/json\" }",
							"  ],",
							"  body: {",
							"    mode: \"raw\",",
							"    raw: JSON.stringify({",
							"      firstName: pm.variables.replaceIn(\"{{$randomFirstName}}\"),",
							"      lastName: pm.variables.replaceIn(\"{{$randomLastName}}\"),",
							"      email: pm.variables.replaceIn(\"{{$randomEmail}}\"),",
							"      password: pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\")",
							"    })",
							"  }",
							"}, function (err, res) {",
							"  if (err) return console.error(\"‚ùå Error creating user:\", err);",
							"",
							"  const user = res.json();",
							"  const userId = user.userId || user.id || user.username;",
							"  pm.environment.set(\"userId\", userId);",
							"  console.log(\"‚úÖ User created:\", userId);",
							"",
							"  // ==========================================",
							"  // STEP 2: CREATE CLUB",
							"  // ==========================================",
							"  pm.sendRequest({",
							"    url: `${baseUrl}/api/clubs`,",
							"    method: \"POST\",",
							"    header: [",
							"      { key: \"Content-Type\", value: \"application/json\" },",
							"      { key: \"Accept\", value: \"application/json\" }",
							"    ],",
							"    body: {",
							"      mode: \"raw\",",
							"      raw: JSON.stringify({",
							"        name: \"Club \" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\"),",
							"        description: \"Auto-generated club for task dataset\"",
							"      })",
							"    }",
							"  }, function (err2, res2) {",
							"    if (err2) return console.error(\"‚ùå Error creating club:\", err2);",
							"",
							"    const club = res2.json();",
							"    const clubId = club.clubId || club.id;",
							"    pm.environment.set(\"clubId\", clubId);",
							"    console.log(\"‚úÖ Club created:\", clubId);",
							"",
							"    // ==========================================",
							"    // STEP 3: ADD USER TO CLUB (ADMIN)",
							"    // ==========================================",
							"    pm.sendRequest({",
							"      url: `${baseUrl}/api/clubs/user`,",
							"      method: \"POST\",",
							"      header: [",
							"        { key: \"Content-Type\", value: \"application/json\" },",
							"        { key: \"Accept\", value: \"application/json\" }",
							"      ],",
							"      body: {",
							"        mode: \"raw\",",
							"        raw: JSON.stringify({",
							"          clubId: clubId,",
							"          username: userId,",
							"          role: \"ADMIN\"",
							"        })",
							"      }",
							"    }, function (err3, res3) {",
							"      if (err3) return console.error(\"‚ùå Error adding user to club:\", err3);",
							"      console.log(\"‚úÖ User added to club as ADMIN\");",
							"",
							"      // ==========================================",
							"      // STEP 4: CREATE 10 TASKS",
							"      // ==========================================",
							"      const taskIds = [];",
							"      const totalTasks = 10;",
							"      const completedCount = 3;",
							"      const overdueCount = 5;",
							"      const futureCount = 2;",
							"",
							"      const taskDates = [];",
							"",
							"      // Generate random dates for tasks",
							"      for (let i = 0; i < completedCount; i++) {",
							"        taskDates.push({ date: randomPastDate(30, 120), completed: true });",
							"      }",
							"      for (let i = 0; i < overdueCount; i++) {",
							"        taskDates.push({ date: randomPastDate(1, 29), completed: false });",
							"      }",
							"      for (let i = 0; i < futureCount; i++) {",
							"        taskDates.push({ date: randomFutureDate(1, 60), completed: false });",
							"      }",
							"",
							"      let created = 0;",
							"      function createTask(index) {",
							"        if (index >= taskDates.length) {",
							"          console.log(\"üéØ All tasks created, proceeding to mark completed ones...\");",
							"          updateCompletedTasks();",
							"          return;",
							"        }",
							"",
							"        const t = taskDates[index];",
							"        const taskBody = {",
							"          title: pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\"),",
							"          dueDate: t.date,",
							"          description: pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\"),",
							"          notification: { notifyBeforeMinutes: 30 },",
							"          clubs: [clubId],",
							"          priority: \"HIGH\",",
							"          userId: userId",
							"        };",
							"",
							"        pm.sendRequest({",
							"          url: `${baseUrl}/api/tasks`,",
							"          method: \"POST\",",
							"          header: [",
							"            { key: \"Content-Type\", value: \"application/json\" },",
							"            { key: \"Accept\", value: \"application/json\" }",
							"          ],",
							"          body: { mode: \"raw\", raw: JSON.stringify(taskBody) }",
							"        }, function (errT, resT) {",
							"          if (errT) console.error(`‚ùå Error creating task #${index + 1}:`, errT);",
							"          else {",
							"            const task = resT.json();",
							"            const taskId = task.taskId || task.id;",
							"            console.log(`‚úÖ Task #${index + 1} created (${t.completed ? \"will be marked completed\" : \"open\"}): ${taskId}`);",
							"            taskIds.push({ id: taskId, completed: t.completed });",
							"          }",
							"          setTimeout(() => createTask(index + 1), 300);",
							"        });",
							"      }",
							"",
							"      createTask(0);",
							"",
							"      // ==========================================",
							"      // STEP 5: UPDATE COMPLETED TASKS",
							"      // ==========================================",
							"      function updateCompletedTasks() {",
							"        const completedTasks = taskIds.filter(t => t.completed);",
							"        if (completedTasks.length === 0) {",
							"          console.log(\"No tasks marked for completion.\");",
							"          return;",
							"        }",
							"",
							"        let updated = 0;",
							"        completedTasks.forEach(t => {",
							"          const updateBody = {",
							"            completed: true,",
							"            userId: userId",
							"          };",
							"",
							"          pm.sendRequest({",
							"            url: `${baseUrl}/api/tasks/${t.id}`,",
							"            method: \"PUT\",",
							"            header: [",
							"              { key: \"Content-Type\", value: \"application/json\" },",
							"              { key: \"Accept\", value: \"application/json\" }",
							"            ],",
							"            body: { mode: \"raw\", raw: JSON.stringify(updateBody) }",
							"          }, function (errU) {",
							"            if (errU) console.error(`‚ùå Failed to mark task ${t.id} completed:`, errU);",
							"            else console.log(`üèÅ Task marked as completed: ${t.id}`);",
							"            updated++;",
							"            if (updated === completedTasks.length) {",
							"              console.log(\"üéâ All completed tasks updated successfully!\");",
							"            }",
							"          });",
							"        });",
							"      }",
							"    });",
							"  });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/clubs/analytic/{{userId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"clubs",
						"analytic",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	]
}